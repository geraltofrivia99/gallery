{"version":3,"sources":["components/Grid/ImageComponen.js","components/Grid/index.jsx","components/Grid/consts.js","App.js","serviceWorker.js","index.js"],"names":["ImageComp","memo","image","cacheImage","useState","load","setLoad","useEffect","undefined","img","Image","src","decode","then","catch","className","alt","data","w","h","i","Array","fill","map","_","rowIndex","colIndex","cell","rowNumber","prevkey","Cell","React","columnIndex","style","trulyRowIndex","length","trulyColumnIndex","dataImage","id","tabIndex","key","left","top","width","height","innerElementType","forwardRef","ref","rest","paddingLeft","paddingTop","GridComp","gridRef","useRef","wrapperRef","setFocus","direction","prev","document","activeElement","previousSibling","focus","preventScroll","next","nextSibling","split","row","column","up","getElementById","down","current","scrollToItem","align","setTimeout","onFocus","e","target","getBoundingClientRect","right","bottom","window","innerHeight","scrollIntoView","behavior","block","offsetWidth","inline","onKeyDown","preventDefault","stopPropagation","keyCode","columnCount","columnWidth","ITEM_WIDTH","rowCount","rowHeight","ITEM_HEIGHT","innerWidth","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f7b3b5af.chunk.js","sourcesContent":["import React, { memo, useState, useEffect } from 'react';\r\n\r\nexport const ImageComp = memo(({ image, cacheImage }) => {\r\n    const [load, setLoad] = useState(cacheImage[image] === true); //dsa\r\n    useEffect(() => {\r\n      if (cacheImage[image] === undefined) {\r\n        const img = new Image(300, 200);\r\n        img.src = image;\r\n        img.decode().then(() => {\r\n            cacheImage[image] = true;\r\n            setLoad(true);\r\n        }).catch(() => {\r\n            cacheImage[image] = false;\r\n        })\r\n      }\r\n    }, [image]);\r\n    if (load) {\r\n      return (\r\n          <img className=\"image\" src={image} alt={\"\"} />\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"image-placeholder\" />\r\n    );\r\n  });","import React from \"react\";\r\nimport { VariableSizeGrid as Grid } from \"react-window\";\r\nimport { ImageComp } from './ImageComponen'\r\nimport { TOTAL_COLUMN, TOTAL_ROW, INITIAL_COLUMN,\r\n    INITIAL_ROW, ITEM_HEIGHT, ITEM_WIDTH, PADDING, LEFT, RIGHT, UP, DOWN } from './consts';\r\n\r\nimport \"./styles.css\";\r\n\r\n\r\nconst data = ((w = 20, h = 15) => {\r\n  let i = 1;\r\n  return new Array(h).fill(0).map((_, rowIndex) => {\r\n    return new Array(w).fill(0).map((_, colIndex) => {\r\n      return {\r\n        image: `https://picsum.photos/id/${i++}/300/200`,\r\n        cell: colIndex,\r\n        rowNumber: rowIndex\r\n      };\r\n    });\r\n  });\r\n})();\r\n\r\nconst cacheImage = {};\r\nlet prevkey = null;\r\n\r\nconst Cell = React.memo(({ columnIndex, rowIndex, style }) => {\r\n    const trulyRowIndex = rowIndex % data.length;\r\n    const trulyColumnIndex = columnIndex % data[trulyRowIndex].length;\r\n    const { image: dataImage, cell } = data[trulyRowIndex][trulyColumnIndex];\r\n    return (\r\n      <div\r\n        id={\"\" + rowIndex + \":\" + columnIndex}\r\n        tabIndex={0}\r\n        className=\"cell-inner\"\r\n        key={\"\" + columnIndex + \" \" + rowIndex}\r\n        style={{\r\n          ...style,\r\n          left: style.left + PADDING,\r\n          top: style.top + PADDING,\r\n          width: style.width - PADDING,\r\n          height: style.height - PADDING\r\n        }}\r\n      >\r\n        <div className=\"image-container\">\r\n          <ImageComp image={dataImage} cacheImage={cacheImage}/>\r\n        </div>\r\n        <div className=\"details\">\r\n          <span className=\"title\">Image number in row: {cell} </span>\r\n          <span className=\"info\">Lorem ...</span>\r\n       </div>\r\n      </div>\r\n    );\r\n  })\r\n\r\nconst innerElementType = React.forwardRef(({ style, ...rest }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    style={{\r\n      ...style,\r\n      paddingLeft: PADDING,\r\n      paddingTop: PADDING\r\n    }}\r\n    {...rest}\r\n  />\r\n));\r\n\r\n export const GridComp = () => {\r\n  const gridRef = React.useRef();\r\n  const wrapperRef = React.useRef();\r\n\r\n  const onFocus = e => {\r\n    const { left, right, top, bottom } = e.target.getBoundingClientRect();\r\n    if (prevkey === 83 && bottom >= window.innerHeight) {\r\n      e.target.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\r\n    } else if (prevkey === 87 && top <= 0) {\r\n      e.target.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n    } else if (prevkey === 68 && right >= wrapperRef.current.offsetWidth) {\r\n      e.target.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\",\r\n        inline: \"end\"\r\n      });\r\n    } else if (prevkey === 65 && left <= 0) {\r\n      e.target.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\",\r\n        inline: \"start\"\r\n      });\r\n    }\r\n    prevkey = null;\r\n  };\r\n  const onKeyDown = e => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.keyCode === 87) {\r\n      prevkey = 87;\r\n      setFocus(UP);\r\n    } else if (e.keyCode === 83) {\r\n      //down\r\n      prevkey = 83;\r\n      setFocus(DOWN);\r\n    } else if (e.keyCode === 65) {\r\n      //left\r\n      prevkey = 65;\r\n      setFocus(LEFT);\r\n    } else if (e.keyCode === 68) {\r\n      //right\r\n      prevkey = 68;\r\n      setFocus(RIGHT);\r\n    }\r\n  };\r\n\r\n  function setFocus(direction) {\r\n    if (direction === LEFT) {\r\n        const prev = document.activeElement.previousSibling;\r\n        if (prev) {\r\n            prev.focus({ preventScroll: true });\r\n        }\r\n    } else if (direction === RIGHT) {\r\n        const next = document.activeElement.nextSibling;\r\n        if (next) {\r\n            next.focus({ preventScroll: true });\r\n        }\r\n    } else if (direction === UP) {\r\n        const [row, column] = document.activeElement.id.split(\":\");\r\n        const up = document.getElementById(`${+row - 1}:${column}`);\r\n        if (up) {\r\n            up.focus({ preventScroll: true });\r\n        }\r\n    } else {\r\n        const [row, column] = document.activeElement.id.split(\":\");\r\n        const down = document.getElementById(`${+row + 1}:${column}`);\r\n        if (down) {\r\n            down.focus({ preventScroll: true });\r\n        }\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    gridRef.current.scrollToItem({\r\n      align: \"start\",\r\n      columnIndex: INITIAL_COLUMN,\r\n      rowIndex: INITIAL_ROW\r\n    });\r\n    setTimeout(() => {\r\n        document.getElementById(`${INITIAL_ROW}:${INITIAL_COLUMN}`).focus({preventScroll: true});\r\n    }, 500)\r\n  }, []);\r\n  return (\r\n    <div onFocus={onFocus} onKeyDown={onKeyDown} ref={wrapperRef}>\r\n      <Grid\r\n        className=\"Grid\"\r\n        columnCount={TOTAL_COLUMN}\r\n        columnWidth={() => ITEM_WIDTH + PADDING}\r\n        height={window.innerHeight}\r\n        innerElementType={innerElementType}\r\n        rowCount={TOTAL_ROW}\r\n        rowHeight={() => ITEM_HEIGHT + PADDING}\r\n        width={window.innerWidth}\r\n        ref={gridRef}\r\n      >\r\n        {Cell}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","export const TOTAL_ROW = 4000;\r\nexport const TOTAL_COLUMN = 4000;\r\nexport const INITIAL_COLUMN = 2000;\r\nexport const INITIAL_ROW = 2000;\r\nexport const ITEM_WIDTH = 300;\r\nexport const ITEM_HEIGHT = 200;\r\nexport const PADDING = 5;\r\n\r\nexport const LEFT = 'left';\r\nexport const RIGHT = 'RIGHT';\r\nexport const UP = 'UP';\r\nexport const DOWN = 'DOWN';","import React from 'react';\nimport { Grid } from './components';\n\nimport './App.css';\n\nconst data = ((w = 20, h = 15) => {\n  let i = 1;\n  return new Array(h).fill(0).map((_, rowIndex) => {\n    return new Array(w).fill(0).map((_, colIndex) => {\n      return {\n        image: `https://picsum.photos/id/${i++}/300/200`,\n        cell: colIndex,\n        rowNumber: rowIndex\n      };\n    });\n  });\n})();\n\nfunction App() {\n  return (\n    <Grid data={data} />\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}